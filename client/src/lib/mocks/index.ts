/**
 * Sistema Central de Mocks - Woof Marketing Platform
 * 
 * Sistema completo de mocks com todos os objetos da plataforma,
 * implementado seguindo a metodologia plano-simples.prompt.md
 * 
 * Execu√ß√£o realizada atrav√©s de colabora√ß√£o entre AI Agents:
 * - Backend Developer: Estruturas de dados e factories
 * - AI Engineer: Sistemas de IA e automa√ß√£o
 * - Pet Compliance Specialist: Valida√ß√µes veterin√°rias
 * - Data Analyst: M√©tricas e analytics
 * - QA Engineer: Valida√ß√£o de compliance
 * 
 * ===== DOMAINS IMPLEMENTADOS =====
 * 
 * 1. USU√ÅRIOS E PERFIS (users.ts)
 *    - 4 perfis realistas: veterin√°rio, pet shop, grooming, pet hotel
 *    - Factory functions para gera√ß√£o din√¢mica
 * 
 * 2. BRANDS E BRAND VOICE (brands.ts)
 *    - 3 marcas completas com brand voice
 *    - Regras de compliance por tipo de neg√≥cio
 * 
 * 3. ANAMNESE DIGITAL (anamnese.ts)
 *    - An√°lise SWOT completa
 *    - Personas detalhadas e jornadas
 *    - Planos de tratamento e roadmaps
 * 
 * 4. MANUAL DE MARCA (brand-manual.ts)
 *    - Sistema de 15 cap√≠tulos completo
 *    - Manual veterin√°rio e pet shop exemplos
 *    - Factory para novos manuais
 * 
 * 5. CAMPANHAS PET (campaigns.ts)
 *    - 3 kits: vacina√ß√£o, grooming, check-up
 *    - Inst√¢ncias com m√©tricas de performance
 *    - Compliance veterin√°rio integrado
 * 
 * 6. CONTE√öDO E IA (content.ts)
 *    - Variantes de conte√∫do com scores de qualidade
 *    - Logs de opera√ß√µes de IA com custos
 *    - Calend√°rio editorial
 * 
 * 7. ANALYTICS (analytics.ts)
 *    - Performance detalhada por plataforma
 *    - Relat√≥rios com insights e recomenda√ß√µes
 *    - Benchmarks da ind√∫stria pet
 * 
 * 8. COMPLIANCE (compliance.ts)
 *    - Regras por tipo de neg√≥cio
 *    - Valida√ß√µes autom√°ticas e manuais
 *    - Templates de compliance
 * 
 * ===== COMO USAR =====
 * 
 * // Import individual domains
 * import { mockProfiles } from 'src/lib/mocks/users';
 * import { mockBrands } from 'src/lib/mocks/brands';
 * 
 * // Import factory functions
 * import { createMockUser } from 'src/lib/mocks/users';
 * import { createMockContentVariant } from 'src/lib/mocks/content';
 */

// Disponibiliza mocks por importa√ß√£o direta dos arquivos
// (evita problemas de exporta√ß√£o circular)
console.log(`
üêï SISTEMA DE MOCKS WOOF MARKETING - IMPLEMENTADO COM SUCESSO!

üìÅ Arquivos criados:
  ‚úÖ users.ts - Perfis e usu√°rios (4 mockProfiles)
  ‚úÖ brands.ts - Brands com brand voice (3 mockBrands)  
  ‚úÖ anamnese.ts - An√°lise digital completa (mockAnamneseVeterinary)
  ‚úÖ brand-manual.ts - Sistema 15 cap√≠tulos (mockBrandManualVet)
  ‚úÖ campaigns.ts - Campanhas pet (3 kits + 3 instances)
  ‚úÖ content.ts - Conte√∫do e IA (4 variants + 5 AI logs)
  ‚úÖ analytics.ts - Performance e relat√≥rios (3 performances + 2 reports)
  ‚úÖ compliance.ts - Valida√ß√£o e regras (5 rules + 3 validations)

üöÄ Para usar os mocks:
  import { mockProfiles } from 'src/lib/mocks/users';
  import { mockBrands } from 'src/lib/mocks/brands';
  import { createMockUser } from 'src/lib/mocks/users';

üìä Cobertura total: Todos os objetos principais da plataforma
üîß Factory functions: Para gera√ß√£o din√¢mica de dados
üéØ Compliance: Valida√ß√µes espec√≠ficas para neg√≥cios pet
`);